def setBuildStatus(String message, String state, String sha) {
    context = "continuous-integration/eclipse-omr/branch/linux_arm"
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/eclipse/omr"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        commitShaSource: [$class: "ManuallyEnteredShaSource", sha: sha ],
        statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: "${BUILD_URL}flowGraphTable/"],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
    ]);
}

LABEL = (params.LABEL) ? "${params.LABEL}" : "Linux && x86 && compile:arm"
REPO = (params.OMR_REPO) ? "${params.OMR_REPO}" : "https://github.com/eclipse/omr.git"
BRANCH = (params.OMR_BRANCH) ? "${params.OMR_BRANCH}" : ((params.MERGE_COMMIT) ? "${MERGE_COMMIT}" : "refs/heads/master")

pipeline {
    agent{label "${LABEL}"}
    environment {
        PATH = "/usr/lib/ccache/:/home/jenkins/arm/toolchain/bin:$PATH"
        PLATFORM = "arm-linux-gcc"
        CHOST = "arm-linux-gnueabihf"
    }
    stages {
        stage('Get Sources') {
            steps {
                timestamps {
                    checkout([$class: 'GitSCM', branches: [[name: "${BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${REPO}"]]])
                    script {
                        if(params.MERGE_COMMIT){
                            setBuildStatus("In Progress","PENDING","${MERGE_COMMIT}")
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                timestamps {
                    echo 'Output CCACHE stats before running and clear them'
                    sh '''(ccache --version &>/dev/null && ccache -s -z) || echo "Warning: ccache not found"'''
                    
                    echo 'Configure...'
                    sh '''make -f run_configure.mk OMRGLUE=./example/glue SPEC=linux_arm'''
                    
                    echo 'Compile...'
                    sh '''make -j4'''
                    
                    echo 'Output CCACHE stats after running'
                    sh '''(ccache --version &>/dev/null && ccache -s) || echo "Warning: ccache not found"'''
                }
            }
        }
        stage('Test') {
            steps {
                timestamps {
                    echo "Currently no sanity tests..."
                }
            }
        }
    }
    post {
        success {
            script {
                if(params.MERGE_COMMIT){
                    setBuildStatus("Complete","SUCCESS","${MERGE_COMMIT}")
                }
            }
        }
        failure {
            script {
                if(params.MERGE_COMMIT){
                    setBuildStatus("Complete","FAILURE","${MERGE_COMMIT}")
                }
            }
        }
        always {
            echo 'Cleanup workspace'
            deleteDir()
        }
    }
}

